// Tessellation Control Shader
//
// Executa o calculo dos niveis de tesselation e passa os vértices para o TES.

#version 400

layout(vertices = 4) out;

// Nível de tessellation mínimo e máximo
const int MIN_TESS_LEVEL = 1;
uniform int MAX_TESS_LEVEL;

// Posição da câmera
uniform vec3 CameraPosition;
uniform bool TessellateByDistance;

// Posição do centro do terreno
uniform vec3 TerrainCenter;
uniform bool TessellateMiddle;

// A partir de qual distância o TessLevel será o mínimo
uniform int MAX_DISTANCE;

in vec2 vTexCoord[];
in vec4 vPosition[];

out vec2 tcTexCoord[];
out vec4 tcPosition[];

#define ID gl_InvocationID

// Nivel de tessellation vai ser uma interpolação entre o mínimo e o máximo de acordo com a distancia
int calcTess(float dist)
{
	return int(mix(MAX_TESS_LEVEL, MIN_TESS_LEVEL, clamp(dist / MAX_DISTANCE, 0.0, 1.0)));
}

void setTess(float tessLevel)
{
		gl_TessLevelOuter[0] = tessLevel;
		gl_TessLevelOuter[1] = tessLevel;
		gl_TessLevelOuter[2] = tessLevel;
		gl_TessLevelOuter[3] = tessLevel;

		gl_TessLevelInner[0] = tessLevel;
		gl_TessLevelInner[1] = tessLevel;
}

void main()
{
	// Precisamos passar adiante valores
	tcTexCoord[ID] = vTexCoord[ID];
	tcPosition[ID] = vPosition[ID];

	// Vamos modificar o inner e outer apenas para o primeiro vértice do Patch
	if (ID == 0)
	{
		setTess(MIN_TESS_LEVEL);

		if (TessellateMiddle)
		{
			vec4 center = (vPosition[0] + vPosition[1] + vPosition[2] + vPosition[3]) * 0.25;
	
			if (center.xz == TerrainCenter.xz)
			{
				setTess(MAX_TESS_LEVEL);
				return;
			}
		}

		if (TessellateByDistance)
		{
			// Calcula as 4 arestas do patch
			vec4 leftSide = vPosition[0] + (vPosition[1] - vPosition[0]) * 0.5;
			vec4 topSide = vPosition[1] + (vPosition[2] - vPosition[1]) * 0.5;
			vec4 rightSide = vPosition[3] + (vPosition[2] - vPosition[3]) * 0.5;
			vec4 bottomSide = vPosition[0] + (vPosition[3] - vPosition[0]) * 0.5;
		
			// Calcula 4 distâncias, uma para cada aresta do Patch
			// isso é feito para garantir que o TessLevel seja o mesmo para todas as arestas vizinhas
			float distL = distance(CameraPosition.xz, leftSide.xz);
			float distT = distance(CameraPosition.xz, topSide.xz);
			float distR = distance(CameraPosition.xz, rightSide.xz);
			float distB = distance(CameraPosition.xz, bottomSide.xz);
		
			gl_TessLevelOuter[0] = calcTess(distB);
			gl_TessLevelOuter[1] = calcTess(distL);
			gl_TessLevelOuter[2] = calcTess(distT);
			gl_TessLevelOuter[3] = calcTess(distR);

			gl_TessLevelInner[0] = max(calcTess(distL), calcTess(distR));
			gl_TessLevelInner[1] = max(calcTess(distT), calcTess(distB));
		}
	}
}