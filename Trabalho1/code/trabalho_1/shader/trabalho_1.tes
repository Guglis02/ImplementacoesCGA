// Tessellation Evaluation Shader

#version 400

layout(quads, equal_spacing, cw) in;

uniform mat4 MVP;
uniform float time;
uniform sampler2D displacementmapSampler;

in vec4 tcPosition[];
in vec2 tcTexCoord[];

out vec2 teTexCoord;

void main()
{
    // Coordenadas geradas pela GPU
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    // Vértices do nosso Patch
    vec4 p0 = tcPosition[0];
    vec4 p1 = tcPosition[1];
    vec4 p2 = tcPosition[2];
    vec4 p3 = tcPosition[3];

    // Linear interpolation
    gl_Position =
        p0 * (1 - u) * (1 - v) +
        p1 * u * (1 - v) +
        p3 * v * (1 - u) +
        p2 * u * v;

    // TextureCoords do nosso Patch
    vec2 t0 = tcTexCoord[0];
    vec2 t1 = tcTexCoord[1];
    vec2 t2 = tcTexCoord[2];
    vec2 t3 = tcTexCoord[3];

    // Linear interpolation
    teTexCoord =
        t0 * (1 - u) * (1 - v) +
        t1 * u * (1 - v) +
        t3 * v * (1 - u) +
        t2 * u * v;


    float yOffset = 0.0;

    const float frequency1 = 10.0;
    const float amplitude1 = 1;

    const float frequency2 = 10.0;
    const float amplitude2 = 0.5;

    for (int i = 1; i <= 10; i++) { 
        yOffset += sin(teTexCoord.x * frequency1 + time * 2.0 + float(i) * 3.14159265359) * amplitude1 / float(i);
        yOffset += sin(teTexCoord.y * frequency2 + time * 2.0 + float(i) * 3.14159265359) * amplitude2 / float(i);
    }

    // Apply the Y displacement
    gl_Position.y = p0.y + yOffset + texture(displacementmapSampler, teTexCoord).y * 1.0f;

    // Transform to clip coordinates
    gl_Position = MVP * gl_Position;
}
